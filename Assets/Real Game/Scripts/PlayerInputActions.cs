//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Real Game/Scripts/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""ae3564fe-b4c9-4b09-8808-91963c7d3443"",
            ""actions"": [
                {
                    ""name"": ""Lane1"",
                    ""type"": ""Button"",
                    ""id"": ""3725f186-99a0-405d-bfb9-cb78dafd9eef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lane2"",
                    ""type"": ""Button"",
                    ""id"": ""a561bf8f-f6e4-4504-a1bd-91f46a30c0c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lane3"",
                    ""type"": ""Button"",
                    ""id"": ""623106e7-3308-434b-84b0-6ec7993084df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lane4"",
                    ""type"": ""Button"",
                    ""id"": ""6a2e504a-2db6-4994-9d72-c719c0be7c22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fb1ba186-7928-4ab6-a118-39e46119e90e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lane1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f996832-0487-4771-bf67-c19efc2088e2"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lane2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f97d71e8-ac4a-4fc0-8770-7a2f30b4dbce"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lane3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7c01dac-9ee2-40b6-a17c-ea98a36078eb"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lane4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Lane1 = m_Gameplay.FindAction("Lane1", throwIfNotFound: true);
        m_Gameplay_Lane2 = m_Gameplay.FindAction("Lane2", throwIfNotFound: true);
        m_Gameplay_Lane3 = m_Gameplay.FindAction("Lane3", throwIfNotFound: true);
        m_Gameplay_Lane4 = m_Gameplay.FindAction("Lane4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Lane1;
    private readonly InputAction m_Gameplay_Lane2;
    private readonly InputAction m_Gameplay_Lane3;
    private readonly InputAction m_Gameplay_Lane4;
    public struct GameplayActions
    {
        private @PlayerInputActions m_Wrapper;
        public GameplayActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Lane1 => m_Wrapper.m_Gameplay_Lane1;
        public InputAction @Lane2 => m_Wrapper.m_Gameplay_Lane2;
        public InputAction @Lane3 => m_Wrapper.m_Gameplay_Lane3;
        public InputAction @Lane4 => m_Wrapper.m_Gameplay_Lane4;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Lane1.started += instance.OnLane1;
            @Lane1.performed += instance.OnLane1;
            @Lane1.canceled += instance.OnLane1;
            @Lane2.started += instance.OnLane2;
            @Lane2.performed += instance.OnLane2;
            @Lane2.canceled += instance.OnLane2;
            @Lane3.started += instance.OnLane3;
            @Lane3.performed += instance.OnLane3;
            @Lane3.canceled += instance.OnLane3;
            @Lane4.started += instance.OnLane4;
            @Lane4.performed += instance.OnLane4;
            @Lane4.canceled += instance.OnLane4;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Lane1.started -= instance.OnLane1;
            @Lane1.performed -= instance.OnLane1;
            @Lane1.canceled -= instance.OnLane1;
            @Lane2.started -= instance.OnLane2;
            @Lane2.performed -= instance.OnLane2;
            @Lane2.canceled -= instance.OnLane2;
            @Lane3.started -= instance.OnLane3;
            @Lane3.performed -= instance.OnLane3;
            @Lane3.canceled -= instance.OnLane3;
            @Lane4.started -= instance.OnLane4;
            @Lane4.performed -= instance.OnLane4;
            @Lane4.canceled -= instance.OnLane4;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnLane1(InputAction.CallbackContext context);
        void OnLane2(InputAction.CallbackContext context);
        void OnLane3(InputAction.CallbackContext context);
        void OnLane4(InputAction.CallbackContext context);
    }
}
